const express = require('express');
const morgan = require('morgan');
const tourRouter = require('./routes/tourRoutes');
const userRouter = require('./routes/userRoutes');

const app = express();

//* 1) Middlewares
if (process.env.NODE_ENV === 'development') {
  // istekleri loglamak iÃ§in kullanÄ±lÄ±r.
  app.use(morgan('dev'));
}

/**
 * Express ile oluÅŸturulan Node.js uygulamalarÄ±nda gelen isteklerin gÃ¶vdesini (body)
 * JSON formatÄ±nda ayrÄ±ÅŸtÄ±rmak (parse etmek) iÃ§in kullanÄ±lÄ±r.
 */
app.use(express.json());
/**
 * BU ÅŸekilde proje dizinindeki static dosyalara tarayÄ±cÄ±dan eriÅŸilebilir.
 * public dosyasÄ±ndaki statik dosyalara eriÅŸmek iÃ§in kullanÄ±lan middleware.
 * Ã–rneÄŸin bu middleware sayesinde http://127.0.0.1:3000/overview.html url'i overview.html
 * dosyasÄ±nÄ± tarayÄ±cada gÃ¶rÃ¼ntÃ¼leyebildik.
 */
app.use(express.static(`${__dirname}/public`));

app.use((req, res, next) => {
  console.log('Hello from the middleware ğŸ‘‹');
  next();
});

/**
 * Bu middleware ile gelen isteklere date bilgisi yazdÄ±rdÄ±k.
 * Ve bunu getAllTours (requestedAt) ile client'a gÃ¶nderdik.
 * */
app.use((req, res, next) => {
  req.requestTime = new Date().toISOString();
  next();
});

//* 3) ROUTES
/**
 * /api/v1/tours rout'unu tourRouter middleware'ine deÄŸiÅŸkenine baÄŸladÄ±k.
 * ArtÄ±k tourRouter'Ä±n kendi alt router'larÄ±nÄ± tanÄ±mlayabiliriz.
 */
app.use('/api/v1/tours', tourRouter);
app.use('/api/v1/users', userRouter);

module.exports = app;
